# 1) HTTP: handle ACME-challenges and redirect everything else to HTTPS
server {
    listen 80 default_server;
    server_name exampledomain.com www.exampledomain.com;

    # respond to Let's Encrypt HTTP-01 challenges
    location ^~ /.well-known/acme-challenge/ {
        alias /var/www/certbot/.well-known/acme-challenge/;
        try_files $uri =404;
    }

    # all other requests → HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}


# 2) HTTPS: SSL termination + proxy to your Chainlit backend
server {
    listen 443 ssl;
    http2 on;
    server_name exampledomain.com www.exampledomain.com;

    # SSL certs from your certbot volume
    ssl_certificate     /etc/letsencrypt/live/exampledomain.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/exampledomain.com/privkey.pem;

    # SSL tuning (Mozilla “Intermediate” compatibility)
    ssl_protocols       TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_session_cache   shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    resolver            1.1.1.1 8.8.8.8 valid=300s;
    resolver_timeout    5s;

    ssl_ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;

    # Security headers
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy no-referrer-when-downgrade always;
    add_header Content-Security-Policy "default-src 'self';" always;

    # still allow ACME file fetches over HTTPS (for renewals if needed)
    location ^~ /.well-known/acme-challenge/ {
        alias /var/www/certbot/.well-known/acme-challenge/;
        try_files $uri =404;
    }

    # proxy incoming requests
    location /sub-path/ {
        # Pay attention to difference between having "/" or not
        proxy_pass         http://exampleservice:80;
        proxy_http_version 1.1;
        proxy_set_header   Host              $host;
        proxy_set_header   X-Forwarded-Host  $host;
        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   X-Real-IP         $remote_addr;
        proxy_set_header   Upgrade           $http_upgrade;
        proxy_set_header   Connection        "upgrade";
        proxy_buffering    off;
        proxy_redirect     off;
        proxy_read_timeout 86400s;
    }

    # optionally add catch-all redirect of bare “/” to other URLs
}
